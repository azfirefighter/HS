From 141aa663e3c9c5e77f0aac08b21dba7b93e5e36d Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Sat, 12 Jan 2019 19:11:11 +0200
Subject: [PATCH 1/3] add cmake buildsystem

---
 CMakeLists.txt               | 51 ++++++++++++++++++++++++++++++++++++
 cmake/FindArduiPi_OLED.cmake |  5 ++++
 cmake/FindI2c.cmake          |  4 +++
 3 files changed, 60 insertions(+)
 create mode 100644 CMakeLists.txt
 create mode 100644 cmake/FindArduiPi_OLED.cmake
 create mode 100644 cmake/FindI2c.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..a31c13e
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,51 @@
+cmake_minimum_required(VERSION 2.6)
+
+set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)
+
+set(APP_NAME "MMDVMHost")
+project(${APP_NAME})
+
+option(ENABLE_OLED "Enable OLED support" OFF)
+option(ENABLE_ADAFRUIT "Enable Adafruit RGB LCD Shield support" OFF)
+
+if(GIT_VERSION)
+  set(GIT_HASH ${GIT_VERSION})
+else()
+  set(GIT_HASH "0000000000")
+endif()
+file(WRITE ${CMAKE_SOURCE_DIR}/GitVersion.h "const char *gitversion = \"${GIT_HASH}\";")
+
+file(GLOB SOURCES "*.cpp")
+file(GLOB HEADERS "*.h")
+
+SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Os -Wall -std=c++0x $ENV{CXXFLAGS}")
+set(DEPLIBS "")
+
+find_package(Threads REQUIRED QUIET)
+list(APPEND DEPLIBS ${CMAKE_THREAD_LIBS_INIT})
+
+if(ENABLE_OLED)
+  find_package(ArduiPi_OLED REQUIRED)
+  include_directories(${ARDUIPI_OLED_INCLUDE_DIRS})
+  list(APPEND DEPLIBS ${ARDUIPI_OLED_LIBRARIES})
+
+  find_package(I2c REQUIRED)
+  include_directories(${I2C_INCLUDE_DIRS})
+  list(APPEND DEPLIBS ${I2C_LIBRARIES})
+
+  add_definitions(-DOLED)
+else()
+  list(REMOVE_ITEM SOURCES ${CMAKE_SOURCE_DIR}/OLED.cpp)
+  list(REMOVE_ITEM HEADERS ${CMAKE_SOURCE_DIR}/OLED.h)
+endif()
+
+# meh.
+list(REMOVE_ITEM SOURCES ${CMAKE_SOURCE_DIR}/HD44780.cpp)
+list(REMOVE_ITEM HEADERS ${CMAKE_SOURCE_DIR}/HD44780.h)
+
+# more meh
+list(REMOVE_ITEM SOURCES ${CMAKE_SOURCE_DIR}/RemoteCommand.cpp)
+list(REMOVE_ITEM HEADERS ${CMAKE_SOURCE_DIR}/RemoteCommand.h)
+
+add_executable(${APP_NAME} ${SOURCES} ${HEADERS})
+target_link_libraries(${APP_NAME} ${DEPLIBS})
diff --git a/cmake/FindArduiPi_OLED.cmake b/cmake/FindArduiPi_OLED.cmake
new file mode 100644
index 0000000..ee31a31
--- /dev/null
+++ b/cmake/FindArduiPi_OLED.cmake
@@ -0,0 +1,5 @@
+find_library(ARDUIPI_OLED_LIBRARIES ArduiPi_OLED)
+find_path(ARDUIPI_OLED_INCLUDE_DIRS NAMES ArduiPi_OLED.h ArduiPi_OLED_lib.h)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(ArduiPi_OLED DEFAULT_MSG ARDUIPI_OLED_LIBRARIES ARDUIPI_OLED_INCLUDE_DIRS)
diff --git a/cmake/FindI2c.cmake b/cmake/FindI2c.cmake
new file mode 100644
index 0000000..dafe15e
--- /dev/null
+++ b/cmake/FindI2c.cmake
@@ -0,0 +1,4 @@
+find_library(I2C_LIBRARIES i2c)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(I2C DEFAULT_MSG I2C_LIBRARIES)
-- 
2.25.0


From a8e2fd00ecf231d1a0c24b5ebb49a6b20cc09080 Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Sat, 14 Apr 2018 11:35:26 +0300
Subject: [PATCH 2/3] disable oled fullscreenwtfscroll

---
 OLED.cpp | 2 --
 1 file changed, 2 deletions(-)

diff --git a/OLED.cpp b/OLED.cpp
index 8dbfbe5..b1907c4 100644
--- a/OLED.cpp
+++ b/OLED.cpp
@@ -240,8 +240,6 @@ void COLED::setIdleInt()
 //    m_display.print("Idle");
 
 //    m_display.setTextSize(1);
-    m_display.startscrolldiagright(0x00,0x0f);  //the MMDVM logo scrolls the whole screen
-    m_display.display();
 
     unsigned char info[100U];
     CNetworkInfo* m_network;
-- 
2.25.0


From efb35abbfcdfd5c2598e07d73c8fd172f73e0502 Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Wed, 22 Jan 2020 23:16:17 +0200
Subject: [PATCH 3/3] nope. this hurts. too much..

---
 DMRSlot.cpp | 40 ----------------------------------------
 DMRSlot.h   |  3 ---
 2 files changed, 43 deletions(-)

diff --git a/DMRSlot.cpp b/DMRSlot.cpp
index f42def4..731a624 100644
--- a/DMRSlot.cpp
+++ b/DMRSlot.cpp
@@ -47,9 +47,6 @@ DMR_OVCM_TYPES CDMRSlot::m_ovcm = DMR_OVCM_OFF;
 
 CRSSIInterpolator* CDMRSlot::m_rssiMapper = NULL;
 
-unsigned int   CDMRSlot::m_jitterTime  = 360U;
-unsigned int   CDMRSlot::m_jitterSlots = 6U;
-
 unsigned char* CDMRSlot::m_idle = NULL;
 
 FLCO           CDMRSlot::m_flco1;
@@ -996,7 +993,6 @@ void CDMRSlot::writeEndNet(bool writeEnd)
 
 	m_networkWatchdog.stop();
 	m_netTimeoutTimer.stop();
-	m_packetTimer.stop();
 	m_netTimeout = false;
 
 	m_netFrames = 0U;
@@ -1092,9 +1088,6 @@ void CDMRSlot::writeNetwork(const CDMRData& dmrData)
 			m_modem->writeDMRAbort(m_slotNo);
 		}
 
-		for (unsigned int i = 0U; i < m_jitterSlots; i++)
-			writeQueueNet(m_idle);
-
 		if (m_duplex) {
 			for (unsigned int i = 0U; i < NO_HEADERS_DUPLEX; i++)
 				writeQueueNet(data);
@@ -1137,9 +1130,6 @@ void CDMRSlot::writeNetwork(const CDMRData& dmrData)
 				m_modem->writeDMRAbort(m_slotNo);
 			}
 
-			for (unsigned int i = 0U; i < m_jitterSlots; i++)
-				writeQueueNet(m_idle);
-
 			// Create a dummy start frame
 			unsigned char start[DMR_FRAME_LENGTH_BYTES + 2U];
 
@@ -1328,9 +1318,6 @@ void CDMRSlot::writeNetwork(const CDMRData& dmrData)
 				m_modem->writeDMRAbort(m_slotNo);
 			}
 
-			for (unsigned int i = 0U; i < m_jitterSlots; i++)
-				writeQueueNet(m_idle);
-
 			// Create a dummy start frame
 			unsigned char start[DMR_FRAME_LENGTH_BYTES + 2U];
 
@@ -1410,9 +1397,6 @@ void CDMRSlot::writeNetwork(const CDMRData& dmrData)
 
 			m_netEmbeddedData[m_netEmbeddedWriteN].reset();
 
-			m_packetTimer.start();
-			m_elapsed.start();
-
 			m_netFrames++;
 
 			// Save details in case we need to infill data
@@ -1557,9 +1541,6 @@ void CDMRSlot::writeNetwork(const CDMRData& dmrData)
 				writeQueueNet(data);
 		}
 
-		m_packetTimer.start();
-		m_elapsed.start();
-
 		m_netFrames++;
 
 		// Save details in case we need to infill data
@@ -1805,21 +1786,6 @@ void CDMRSlot::clock()
 			}
 		}
 	}
-
-	if (m_netState == RS_NET_AUDIO) {
-		m_packetTimer.clock(ms);
-
-		if (m_packetTimer.isRunning() && m_packetTimer.hasExpired()) {
-			unsigned int elapsed = m_elapsed.elapsed();
-			if (elapsed >= m_jitterTime) {
-				LogDebug("DMR Slot %u, lost audio for %ums filling in", m_slotNo, elapsed);
-				insertSilence(m_jitterSlots);
-				m_elapsed.start();
-			}
-
-			m_packetTimer.start();
-		}
-	}
 }
 
 void CDMRSlot::writeQueueRF(const unsigned char *data)
@@ -1913,11 +1879,6 @@ void CDMRSlot::init(unsigned int colorCode, bool embeddedLCOnly, bool dumpTAData
 
 	m_rssiMapper     = rssiMapper;
 
-	m_jitterTime     = jitter;
-	
-	float jitter_tmp = float(jitter) / 360.0F;
-	m_jitterSlots    = (unsigned int) (std::ceil(jitter_tmp) * 6.0F);
-
 	m_idle = new unsigned char[DMR_FRAME_LENGTH_BYTES + 2U];
 	::memcpy(m_idle, DMR_IDLE_DATA, DMR_FRAME_LENGTH_BYTES + 2U);
 
@@ -2173,7 +2134,6 @@ void CDMRSlot::enable(bool enabled)
 
 		m_networkWatchdog.stop();
 		m_netTimeoutTimer.stop();
-		m_packetTimer.stop();
 		m_netTimeout = false;
 
 		m_netFrames = 0U;
diff --git a/DMRSlot.h b/DMRSlot.h
index 1e95dc2..d96f084 100644
--- a/DMRSlot.h
+++ b/DMRSlot.h
@@ -127,9 +127,6 @@ private:
 
 	static CRSSIInterpolator*  m_rssiMapper;
 
-	static unsigned int        m_jitterTime;
-	static unsigned int        m_jitterSlots;
-
 	static unsigned char*      m_idle;
 
     static FLCO                m_flco1;
-- 
2.25.0

